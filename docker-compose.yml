version: '3.8'

services:

  mongo:
    image: mongo:5.0
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    networks:
      - backend

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
      RABBITMQ_LOAD_DEFINITIONS: "true"
      RABBITMQ_DEFINITIONS_FILE: /etc/rabbitmq/definitions.json
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
      - ./rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
    networks:
      - backend

  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    ports:
      - "${GATEWAY_PORT}:3000"
    environment:
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - user-service
      - order-service
      - payment-service
      - notification-service
    networks:
      - backend

  user-service:
    build: ./user-service
    container_name: user-service
    ports:
      - "${USER_SERVICE_PORT}:3001"
    environment:
      - MONGO_URI=${USER_MONGO_URI}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - mongo
    networks:
      - backend

  order-service:
    build: ./order-service
    container_name: order-service
    ports:
      - "${ORDER_SERVICE_PORT}:3002"
    environment:
      - MONGO_URI=${ORDER_MONGO_URI}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - mongo
    networks:
      - backend

  payment-service:
    build: ./payment-service
    container_name: payment-service
    ports:
      - "${PAYMENT_SERVICE_PORT}:3003"
    environment:
      - MONGO_URI=${PAYMENT_MONGO_URI}
      - RABBITMQ_URL=${RABBITMQ_URL}
    depends_on:
      - mongo
      - rabbitmq
    networks:
      - backend

  notification-service:
    build: ./notification-service
    container_name: notification-service
    ports:
      - "${NOTIFICATION_SERVICE_PORT}:3004"
    environment:
      - RABBITMQ_URL=${RABBITMQ_URL}
    depends_on:
      - rabbitmq
    networks:
      - backend

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "${PROMETHEUS_PORT}:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/rules:/etc/prometheus/rules:ro
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    networks:
      - backend

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "${GRAFANA_PORT}:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/etc/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - backend

  loki:
    image: grafana/loki:2.9.0
    container_name: loki
    ports:
      - "${LOKI_PORT}:3100"
    volumes:
      - ./monitoring/loki/config.yml:/etc/loki/config.yml:ro
    command: -config.file=/etc/loki/config.yml
    networks:
      - backend

networks:
  backend:
    driver: bridge

volumes:
  mongo-data:
  rabbitmq-data:
  grafana-data:
